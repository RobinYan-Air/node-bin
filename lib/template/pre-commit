################### Log start ###################
################### constants ###################
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'

DRED='\033[1;31m'
DGREEN='\033[1;32m'
DYELLOW='\033[1;33m'
DBLUE='\033[1;34m'
DPURPLE='\033[1;35m'
DCYAN='\033[1;36m'

NC='\033[0m'

TIMEOUT_INTERVAL=10
COLOR_GREEN_HEX="#2FB47C"
COLOR_NEUTRAL_HEX="#F7F7F9"
COLOR_RED_HEX="#FF4F42"
################### func ###################

doneMsg() {
  echo "$1 ${GREEN}done${NC}"
}

warnMsg() {
  echo "${YELLOW}WARNING: $1 ${NC}"
}

failMsg() {
  echo "${RED}FAIL: $1 ${NC}"
}

infoMsg() {
  echo "${BLUE}INFO: $1${NC}"
}

sillyMsg() {
  echo "SILLY: $1"
}

################## Log end ###################

PASS=true
ROOT_PATH=$(git rev-parse --show-toplevel)
STAGED_WEB_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "^web-pc" | grep -E "ts$|tsx$|js$")
STAGED_SERVICE_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "^service" | grep -E "ts$|tsx$|js$")
ERROR_MSG=()

sillyMsg "Web-PC: \n${STAGED_WEB_FILES}"
sillyMsg "Service: \n${STAGED_SERVICE_FILES}"

pushErrorMsg() {
  MSG_LENGTH=${#ERROR_MSG[@]}
  ERROR_MSG[$MSG_LENGTH]=$1
}

webPCLint() {
  infoMsg "Start Lint check: Web-PC"
  LINT="$ROOT_PATH/web-pc/node_modules/.bin/tslint"
  TSCONFIG="web-pc/tsconfig.json"
  TSLINTCONFIG="web-pc/tslint.json"

  for FILE in $STAGED_WEB_FILES
  do
    $LINT -q -p $TSCONFIG -c $TSLINTCONFIG $FILE

    if [[ "$?" == 0 ]]; then
      infoMsg "TSLint Passed: $FILE"
    else
      failMsg "TSLint Failed: $FILE"
      pushErrorMsg "TSLint Failed: $FILE"
      PASS=false
    fi
  done
}

webPCUT() {
  infoMsg "Start UT check: Web-PC"
  warnMsg "UT check for WebPC are not ready."
}

serviceLint() {
  infoMsg "Start Lint check: Service"
  warnMsg "Lint check for Service are not ready."
}

serviceUT() {
  infoMsg "Start UT check: Service"
  warnMsg "UT check for Service are not ready."
}

testWebPC() {
  webPCLint
  webPCUT
}

testService() {
  serviceLint
  serviceUT
}

if [[ "$STAGED_WEB_FILES" != "" ]]; then
    testWebPC
fi

if [[ "$STAGED_SERVICE_FILES" != "" ]]; then
    testService
fi

# if [ $PASS == "false" ]
# then
#   failMsg "Git Commit forbidden: Lint & UT check failed, details list as below: "
#   for(( i=0;i<${#ERROR_MSG[@]};i++))
#   do
#     failMsg "${ERROR_MSG[i]}"
#   done
#   exit 1
# else
#   infoMsg "Lint & UT check successful, change commiting..."
#   exit 0
# fi
exit 0
